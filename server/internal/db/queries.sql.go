// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createMeal = `-- name: CreateMeal :exec

INSERT INTO meals (id, meal_plan_id, name, description, day, meal_type)
VALUES ($1, $2, $3, $4, $5, $6)
`

type CreateMealParams struct {
	ID          string         `json:"id"`
	MealPlanID  string         `json:"meal_plan_id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	Day         string         `json:"day"`
	MealType    string         `json:"meal_type"`
}

// Meal Queries
func (q *Queries) CreateMeal(ctx context.Context, arg CreateMealParams) error {
	_, err := q.db.ExecContext(ctx, createMeal,
		arg.ID,
		arg.MealPlanID,
		arg.Name,
		arg.Description,
		arg.Day,
		arg.MealType,
	)
	return err
}

const createMealPlan = `-- name: CreateMealPlan :exec

INSERT INTO meal_plans (id, name, description, created_by)
VALUES ($1, $2, $3, $4)
`

type CreateMealPlanParams struct {
	ID          string         `json:"id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	CreatedBy   string         `json:"created_by"`
}

// Meal Plan Queries
func (q *Queries) CreateMealPlan(ctx context.Context, arg CreateMealPlanParams) error {
	_, err := q.db.ExecContext(ctx, createMealPlan,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.CreatedBy,
	)
	return err
}

const createShareLink = `-- name: CreateShareLink :exec

INSERT INTO share_links (id, meal_plan_id, created_by, role, expires_at)
VALUES ($1, $2, $3, $4, $5)
`

type CreateShareLinkParams struct {
	ID         string    `json:"id"`
	MealPlanID string    `json:"meal_plan_id"`
	CreatedBy  string    `json:"created_by"`
	Role       string    `json:"role"`
	ExpiresAt  time.Time `json:"expires_at"`
}

// Share Link Queries
func (q *Queries) CreateShareLink(ctx context.Context, arg CreateShareLinkParams) error {
	_, err := q.db.ExecContext(ctx, createShareLink,
		arg.ID,
		arg.MealPlanID,
		arg.CreatedBy,
		arg.Role,
		arg.ExpiresAt,
	)
	return err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (id, email, name, picture) 
VALUES ($1, $2, $3, $4)
`

type CreateUserParams struct {
	ID      string         `json:"id"`
	Email   string         `json:"email"`
	Name    string         `json:"name"`
	Picture sql.NullString `json:"picture"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.Name,
		arg.Picture,
	)
	return err
}

const deleteExpiredShareLinks = `-- name: DeleteExpiredShareLinks :exec
DELETE FROM share_links WHERE expires_at < now()
`

func (q *Queries) DeleteExpiredShareLinks(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteExpiredShareLinks)
	return err
}

const deleteMeal = `-- name: DeleteMeal :exec
DELETE FROM meals WHERE id = $1
`

func (q *Queries) DeleteMeal(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteMeal, id)
	return err
}

const deleteMealPlan = `-- name: DeleteMealPlan :exec
DELETE FROM meal_plans WHERE id = $1
`

func (q *Queries) DeleteMealPlan(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteMealPlan, id)
	return err
}

const getMealByID = `-- name: GetMealByID :one
SELECT id, meal_plan_id, name, description, day, meal_type, created_at, updated_at FROM meals WHERE id = $1
`

func (q *Queries) GetMealByID(ctx context.Context, id string) (Meal, error) {
	row := q.db.QueryRowContext(ctx, getMealByID, id)
	var i Meal
	err := row.Scan(
		&i.ID,
		&i.MealPlanID,
		&i.Name,
		&i.Description,
		&i.Day,
		&i.MealType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMealPlanAccess = `-- name: GetMealPlanAccess :many
SELECT id, user_id, meal_plan_id, role FROM meal_plan_access WHERE meal_plan_id = $1
`

func (q *Queries) GetMealPlanAccess(ctx context.Context, mealPlanID string) ([]MealPlanAccess, error) {
	rows, err := q.db.QueryContext(ctx, getMealPlanAccess, mealPlanID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MealPlanAccess
	for rows.Next() {
		var i MealPlanAccess
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.MealPlanID,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMealPlanByID = `-- name: GetMealPlanByID :one
SELECT id, name, description, created_by, created_at, updated_at FROM meal_plans WHERE id = $1
`

func (q *Queries) GetMealPlanByID(ctx context.Context, id string) (MealPlan, error) {
	row := q.db.QueryRowContext(ctx, getMealPlanByID, id)
	var i MealPlan
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMealPlansByUser = `-- name: GetMealPlansByUser :many
SELECT mp.id, mp.name, mp.description, mp.created_by, mp.created_at, mp.updated_at
FROM meal_plans mp
JOIN meal_plan_access mpa ON mpa.meal_plan_id = mp.id
WHERE mpa.user_id = $1
`

func (q *Queries) GetMealPlansByUser(ctx context.Context, userID string) ([]MealPlan, error) {
	rows, err := q.db.QueryContext(ctx, getMealPlansByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MealPlan
	for rows.Next() {
		var i MealPlan
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMealsByPlanID = `-- name: GetMealsByPlanID :many
SELECT id, meal_plan_id, name, description, day, meal_type, created_at, updated_at FROM meals WHERE meal_plan_id = $1
`

func (q *Queries) GetMealsByPlanID(ctx context.Context, mealPlanID string) ([]Meal, error) {
	rows, err := q.db.QueryContext(ctx, getMealsByPlanID, mealPlanID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Meal
	for rows.Next() {
		var i Meal
		if err := rows.Scan(
			&i.ID,
			&i.MealPlanID,
			&i.Name,
			&i.Description,
			&i.Day,
			&i.MealType,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getShareLinkByID = `-- name: GetShareLinkByID :one
SELECT id, meal_plan_id, created_by, role, expires_at, created_at FROM share_links WHERE id = $1
`

func (q *Queries) GetShareLinkByID(ctx context.Context, id string) (ShareLink, error) {
	row := q.db.QueryRowContext(ctx, getShareLinkByID, id)
	var i ShareLink
	err := row.Scan(
		&i.ID,
		&i.MealPlanID,
		&i.CreatedBy,
		&i.Role,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, name, picture, created_at, updated_at FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.Picture,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one

SELECT id, email, name, picture, created_at, updated_at FROM users WHERE id = $1
`

// User Queries
func (q *Queries) GetUserByID(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.Picture,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserMealPlanAccess = `-- name: GetUserMealPlanAccess :one
SELECT id, user_id, meal_plan_id, role FROM meal_plan_access 
WHERE user_id = $1 AND meal_plan_id = $2
`

type GetUserMealPlanAccessParams struct {
	UserID     string `json:"user_id"`
	MealPlanID string `json:"meal_plan_id"`
}

func (q *Queries) GetUserMealPlanAccess(ctx context.Context, arg GetUserMealPlanAccessParams) (MealPlanAccess, error) {
	row := q.db.QueryRowContext(ctx, getUserMealPlanAccess, arg.UserID, arg.MealPlanID)
	var i MealPlanAccess
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.MealPlanID,
		&i.Role,
	)
	return i, err
}

const grantMealPlanAccess = `-- name: GrantMealPlanAccess :exec

INSERT INTO meal_plan_access (id, user_id, meal_plan_id, role)
VALUES ($1, $2, $3, $4)
`

type GrantMealPlanAccessParams struct {
	ID         string `json:"id"`
	UserID     string `json:"user_id"`
	MealPlanID string `json:"meal_plan_id"`
	Role       string `json:"role"`
}

// MealPlanAccess Queries
func (q *Queries) GrantMealPlanAccess(ctx context.Context, arg GrantMealPlanAccessParams) error {
	_, err := q.db.ExecContext(ctx, grantMealPlanAccess,
		arg.ID,
		arg.UserID,
		arg.MealPlanID,
		arg.Role,
	)
	return err
}

const updateMeal = `-- name: UpdateMeal :exec
UPDATE meals
SET name = $2, description = $3, day = $4, meal_type = $5, updated_at = now()
WHERE id = $1
`

type UpdateMealParams struct {
	ID          string         `json:"id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	Day         string         `json:"day"`
	MealType    string         `json:"meal_type"`
}

func (q *Queries) UpdateMeal(ctx context.Context, arg UpdateMealParams) error {
	_, err := q.db.ExecContext(ctx, updateMeal,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Day,
		arg.MealType,
	)
	return err
}

const updateMealPlan = `-- name: UpdateMealPlan :exec
UPDATE meal_plans
SET name = $2, description = $3, updated_at = now()
WHERE id = $1
`

type UpdateMealPlanParams struct {
	ID          string         `json:"id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) UpdateMealPlan(ctx context.Context, arg UpdateMealPlanParams) error {
	_, err := q.db.ExecContext(ctx, updateMealPlan, arg.ID, arg.Name, arg.Description)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users 
SET name = $2, picture = $3, updated_at = now()
WHERE id = $1
`

type UpdateUserParams struct {
	ID      string         `json:"id"`
	Name    string         `json:"name"`
	Picture sql.NullString `json:"picture"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.ID, arg.Name, arg.Picture)
	return err
}
